1- const fetchData = (url) => {
  return new Promise((resolve, reject) => {
    fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response =>  response.json())
    .then(data => resolve(data))
    .catch(error => reject(error));
  });
}

2- const compExponent = (base,exponent) => {  
    if (exponent === 0) {
        return 1;
    } else {
        return base * power(base, exponent - 1);
    }
}

3- const findSecondLowestAndGreatest = (array) => {
    const sortedArray = [...new Set(array)].sort((a, b) => a - b);
    const secondLowest = sortedArray[1];
    const secondGreatest = sortedArray[sortedArray.length - 2];
    return { secondLowest, secondGreatest };
};

4- const isLeap = (year) => year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0);

5- class BankAccount {
    private account_number: number;
    private account_balance: number;
    constructor(account_number: number, account_balance: number) {
        this.account_number = account_number;
        this.account_balance = account_balance;
    }
    deposit(balance: number): void {
        this.account_balance += balance;
    }
    withdraw(balance: number): void {
        if (this.account_balance >= balance) {
            this.account_balance -= balance;
        } else {
            console.log("Insufficient balance");
        }
    }
}
const bank_account = new BankAccount(123456, 1000);
bank_account.deposit(100);
bank_account.withdraw(100);
console.log(bank_account.account_balance);

6- const newstudents = students.filter(student => student.marks > 60);
newstudents.forEach(student => console.log(student.name));
const  lowerStudent = students.map(student => {
  if (student.marks < 60) {
    return { ...student, marks: student.marks + 20 };
  }
  return student;
});
const totalMarks = lowerStudent.reduce((acc, student) => acc + student.marks, 0);

7- const findIndex = (arr, searched_item) => {
    for (let ind = 0; ind < arr.length; ind++) {
        if (arr[ind] === searched_item) {
            return ind;
        }
    }
    return -1;
}

8- const convertLinkedList = (list) => {
  let arr = [];
  while (list.next !== null) {
    arr.push(list.value);
    list = list.next;
  }
  return arr;
};
